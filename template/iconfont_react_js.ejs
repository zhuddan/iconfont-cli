/**
 * @typedef {<%- types %>} IconfontTypes
 */
/**
 * @typedef {object} IconfontProps
 * @property {number} [size] - The size of the icon in pixels
 * @property {string} [color="#000000"] - The color of the icon
 * @property {IconfontTypes} name - The name of the icon to display
 * @property {React.CSSProperties} [style] - Additional CSS styles
 * @property {string} [className] - Additional CSS class names
 */

import clsx from 'clsx'
import { useMemo } from 'react'
<%_ if (achieve === "mask") { _%>
import './iconfont.css'
<%_ }else{ _%>
import data from './iconfont-data'
<%_ } _%>

/**
 * Renders an icon from the iconfont set
 * @param {IconfontProps & React.HTMLAttributes<HTMLDivElement>} props - Component props
 * @returns {JSX.Element} Rendered icon component
 */
export function Iconfont({
  size,
  color = '#000000',
  name,
  style,
  className,
  ...rest
}) {
<%_ if (achieve === "mask") { _%>
  const mask = useMemo(() => {
    return `url("data:image/svg+xml;charset=utf-8,${encodeURIComponent(data[name])}")`
  }, [name])
<%_ }else{ _%>
  const backgroundImage = useMemo(() => {
    const svgData = encodeURIComponent(data[name].replace(/currentColor/g, color))
    return `url("data:image/svg+xml;charset=utf-8,${svgData}")`
  }, [name, color])
<%_ } _%>

  const innerStyle = useMemo(() => {
    const _size = size ? `${size}px` : '1em'
    /** @type {React.CSSProperties} */
    const styles = {
      ...style,
<%_ if (achieve === "mask") { _%>
      ...style,
      '--icon-size': _size,
      '--icon-color': color,
  <%_ }else{ _%>
      width: _size,
      height: _size,
      display: 'inline-block',
      backgroundRepeat: 'no-repeat',
      backgroundSize: _size,
      backgroundImage,
  <%_ } _%>
    }
    return styles
  }, [<%_ if (achieve === "mask") { _%> color, size, style<%_ }else{ _%>backgroundImage, size, style<%_ } _%>])

  return (
    <div
      className={clsx('iconfont', <%_ if (achieve === "mask") { _%> name,<%_ }_%> className)}
      style={innerStyle}
      {...rest}
    />
  )
}
